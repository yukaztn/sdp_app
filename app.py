# -*- coding: utf-8 -*-
"""SBFapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UrBunqn26Zk3G3F--EjGCGZyZqHBsCWI
"""

#!pip install pyPMML gradio pandas
#!pip install jpmml_evaluators

import gradio as gr
import pandas as pd
from jpmml_evaluator import make_evaluator


dataset_models = {
    "CM1": "/content/CM1-SBF.pmml",
    "JM1": "/content/JM1-SBF.pmml",
    "KC1": "/content/KC1-SBF.pmml",
    "KC3": "/content/KC3-SBF.pmml",
    "MC1": "/content/MC1-SBF.pmml",
    "MC2": "/content/MC2-SBF.pmml",
    "PC1": "/content/PC1-SBF.pmml",
    "PC3": "/content/PC3-SBF.pmml",
    "PC4": "/content/PC4-SBF.pmml",
    "PC5": "/content/PC5-SBF.pmml",
}


model_evaluators = {}
model_input_fields = {}

for dataset, model_path in dataset_models.items():
    evaluator = make_evaluator(model_path).verify()
    input_fields = [field.getName() for field in evaluator.getInputFields()]
    model_evaluators[dataset] = evaluator
    model_input_fields[dataset] = input_fields


all_fields = set()
for fields in model_input_fields.values():
    all_fields.update(fields)

template_path = "/content/template.xlsx"
template_df = pd.DataFrame(columns=sorted(all_fields))
template_df.to_excel(template_path, index=False)

def find_matching_model(user_inputs):
    for dataset, input_fields in model_input_fields.items():
        if all(field in user_inputs for field in input_fields):
            return dataset, model_evaluators[dataset], input_fields
    raise ValueError("No matching model found for the provided inputs.")

def normalize_inputs(data):
    for column in data.columns:
        try:
            # Normalize values to floats or integers
            data[column] = data[column].apply(
                lambda x: float(str(x).replace(" ", "").strip()) if pd.notnull(x) else None
            )
        except Exception as e:
            raise ValueError(f"Invalid format in column {column}: {e}")
    return data

def predict_from_excel(file):
    try:

        user_data = pd.read_excel(file.name)
        normalized_data = normalize_inputs(user_data)
        dataset, evaluator, input_fields = find_matching_model(normalized_data.columns)
        prediction_data = normalized_data[input_fields]
        results = evaluator.evaluateAll(prediction_data)
        normalized_data["prediction(Defective)"] = results["prediction(Defective)"]
        normalized_data["Prediction Label"] = normalized_data["prediction(Defective)"].apply(
            lambda x: "Bug-Prone" if x == "Y" else "Not Bug-Prone"
        )
        result_path = "/content/prediction_results.xlsx"
        normalized_data.to_excel(result_path, index=False)

        return "Prediction completed successfully. Download the results below.", result_path

    except Exception as e:
        return f"An error occurred: {str(e)}", None

title = "Software Defect Prediction using SBF-C4.5"
description = f"""
Upload an Excel file containing software metrics to predict whether the software is Bug-Prone or Not Bug-Prone.
The system automatically matches your input fields to the correct prediction model.

### Download Template
[Download Template Excel File](https://docs.google.com/spreadsheets/d/1MT4Koi0QJ9_VSY2FJrDpmDemvRgQ1gST/edit?usp=sharing&ouid=103829640616315810037&rtpof=true&sd=true)
"""

interface = gr.Interface(
    fn=predict_from_excel,
    inputs=[
        gr.File(label="Upload Dataset (Excel file, .xlsx format)"),
    ],
    outputs=[
        gr.Textbox(label="Prediction Status"),
        gr.File(label="Download Results (Excel file)"),
    ],
    title=title,
    description=description,
    flagging_mode="never",
)


interface.launch(share=True)